// script.js ‚Äî –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏–º—ë–Ω, –∂—ë—Å—Ç–∫–∏–π API_BASE
;(function () {
  'use strict';

  const API_BASE = 'https://earning-attitude-hunt-wrote.trycloudflare.com'.replace(/\/$/, '');
  const tg = window.Telegram?.WebApp; if (tg) tg.expand();

  // —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
  const selectOne = (s, r=document)=>r.querySelector(s);
  const selectAll = (s, r=document)=>Array.from(r.querySelectorAll(s));
  const byId = (id)=>document.getElementById(id);

  // –∫–æ–Ω—Ç–µ–∫—Å—Ç
  const params = new URLSearchParams(location.search);
  const initData = tg?.initData || params.get('initData') || '';
  const u = tg?.initDataUnsafe?.user || {};
  const USER_ID = u.id || Number(params.get('user_id')) || 1;
  const USERNAME = u.username || u.first_name || params.get('username') || 'user';

  // —Ç–æ—Å—Ç—ã
  const notifyRoot = byId('notify-root');
  function toast(type, title, msg, ms=2500){
    if (!notifyRoot) return;
    const el = document.createElement('div');
    el.className = `notif ${type||'info'}`;
    el.innerHTML = `<div><div class="title">${title||'–°–æ–æ–±—â–µ–Ω–∏–µ'}</div><div class="msg">${msg||''}</div></div><button class="x">‚úï</button>`;
    notifyRoot.appendChild(el);
    const close=()=>el.remove(); el.querySelector('.x').onclick=close; setTimeout(close, ms);
  }

  // –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
  document.addEventListener('pointermove',(e)=>{
    const b = e.target?.closest('button'); if(!b) return;
    const r = b.getBoundingClientRect();
    b.style.setProperty('--rx',(e.clientX-r.left)+'px');
    b.style.setProperty('--ry',(e.clientY-r.top)+'px');
  });

  // HTTP: simple POST (text/plain) ‚Äî –±–µ–∑ preflight
  async function post(path, data={}){
    const url = API_BASE + (path.startsWith('/')?path:'/'+path);
    const body = initData ? { ...data, initData } : { ...data, user_id: USER_ID, username: USERNAME };
    const res = await fetch(url, { method:'POST', headers:{'Content-Type':'text/plain;charset=UTF-8'}, body: JSON.stringify(body) });
    let js=null; try{ js=await res.json(); }catch{}
    if(!res.ok || !js || js.ok===false) throw new Error((js&&(js.error||js.message))||`HTTP ${res.status}`);
    return js;
  }

  // –ø—Ä–æ–≤–µ—Ä–∫–∞ API
  async function checkApi(){
    try{ const r=await post('/api/bootstrap',{}); console.info('[API OK]', r?.username||''); return true; }
    catch(e){ console.warn('[API FAIL]', String(e.message||e)); return false; }
  }
  window.checkApi = checkApi;

  // –Ω–∞–≤–∏–≥–∞—Ü–∏—è
  const SCREENS = {
    menu: byId('menu'), stats: byId('screen-stats'), submit: byId('screen-submit'),
    report: byId('screen-report'), priv: byId('screen-priv'), roulette: byId('screen-roulette'),
    withdraw: byId('screen-withdraw'), contests: byId('screen-contests'),
  };
  function show(id){ Object.values(SCREENS).forEach(el=>el&&el.classList.add('hidden')); (SCREENS[id]||SCREENS.menu)?.classList.remove('hidden'); }
  selectAll('#menu [data-screen]').forEach(b=>b.addEventListener('click',()=>{
    const s=b.getAttribute('data-screen'); show(s);
    if(s==='stats') loadStats();
    if(s==='report') loadReport();
    if(s==='priv') loadPriv();
    if(s==='roulette') setupRouletteOnce();
    if(s==='contests') loadContests();
    if(s==='withdraw') refreshBalance();
  }));
  selectAll('.back').forEach(b=>b.addEventListener('click',()=>show('menu')));

  // —á–∞—Ç-–ª–æ–≥
  const chatBox = byId('chat');
  function pushBubble(role,text,ts){
    if(!chatBox) return;
    const el=document.createElement('div');
    el.className=`bubble ${role==='admin'?'b-admin':role==='user'?'b-user':'b-system'}`;
    el.innerHTML=`${text}<div class="meta">${ts||''}</div>`;
    chatBox.appendChild(el); chatBox.scrollTop=chatBox.scrollHeight;
  }
  async function loadLogs(){ try{ const r=await post('/api/logs',{}); if(chatBox) chatBox.innerHTML=''; (r.events||[]).forEach(e=>pushBubble(e.role,e.text,e.ts)); }catch{} }
  byId('refreshLogs')?.addEventListener('click',loadLogs);

  // —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  async function loadStats(){
    const pre=byId('statsBox');
    try{ const r=await post('/api/stats',{}); pre&&(pre.textContent=JSON.stringify(r.stats||{},null,2)); }
    catch{ pre&&(pre.textContent='–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'); }
  }

  // —Å–¥–∞—á–∞ MAX
  let currentSubmissionId=0;
  const phoneInput=byId('phone'), codePanel=byId('codePanel'), codeInput=byId('code');
  byId('sendPhone')?.addEventListener('click',async()=>{
    const phone=(phoneInput?.value||'').trim(); if(!phone) return toast('error','–ù–æ–º–µ—Ä','–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
    try{ const r=await post('/api/submit_phone',{phone}); currentSubmissionId=r.submission_id||0; codePanel?.classList.remove('hidden'); toast('success','–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ','–ñ–¥—ë–º –∫–æ–¥'); loadLogs(); }
    catch(e){ toast('error','–û—à–∏–±–∫–∞',String(e.message||e)); }
  });
  byId('sendCode')?.addEventListener('click',async()=>{
    const code=(codeInput?.value||'').trim(); if(!currentSubmissionId||!code) return toast('error','–ö–æ–¥','–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS');
    try{ await post('/api/submit_code',{submission_id:currentSubmissionId,code}); toast('success','–ö–æ–¥ –ø—Ä–∏–Ω—è—Ç','–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'); loadLogs(); }
    catch(e){ toast('error','–û—à–∏–±–∫–∞',String(e.message||e)); }
  });

  // –æ—Ç—á—ë—Ç
  async function loadReport(){
    const box=byId('reportList'); if(!box) return; box.innerHTML='';
    try{
      const r=await post('/api/my_numbers',{});
      (r.rows||[]).forEach(row=>{
        const d=document.createElement('div'); d.className='contest-card';
        d.innerHTML=`<div class="contest-title">#${row.id} ‚Ä¢ ${row.phone||'‚Äî'}</div>
        <div class="contest-meta"><span>–°—Ç–∞—Ç—É—Å: <b>${row.status}</b></span>
        <span>–ú–∏–Ω—É—Ç: <b>${row.minutes}</b></span>
        <span>–ù–∞—á–∏—Å–ª–µ–Ω–æ: <b>$${Number(row.earned||0).toFixed(2)}</b></span></div>`;
        box.appendChild(d);
      });
    }catch{ box.textContent='–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á—ë—Ç–∞'; }
  }
  byId('reportRefresh')?.addEventListener('click',loadReport);

  // –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏
  async function loadPriv(){
    const sum=byId('privSummary');
    try{
      const r=await post('/api/priv/info',{});
      const plan=r.plan?.plan||'standard', until=r.plan?.plan_until||'‚Äî', rate=r.rate!=null?`$${Number(r.rate).toFixed(2)}`:'‚Äî';
      sum&&(sum.textContent=`–¢–∞—Ä–∏—Ñ: ${plan} ‚Ä¢ –°—Ç–∞–≤–∫–∞: ${rate} ‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${until}`);
      const p=r.prices||{}; byId('price-premium')&&(byId('price-premium').textContent=`$${p.premium||40}`); byId('price-speed')&&(byId('price-speed').textContent=`$${p.speed||30}`);
    }catch{ sum&&(sum.textContent='–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤'); }
  }
  byId('buy-premium')?.addEventListener('click',async()=>{ try{ await post('/api/priv/buy',{plan:'premium'}); toast('success','–¢–∞—Ä–∏—Ñ','–ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'); loadPriv(); }catch(e){ toast('error','–ü–æ–∫—É–ø–∫–∞',String(e.message||e)); }});
  byId('buy-speed')?.addEventListener('click',async()=>{ try{ await post('/api/priv/buy',{plan:'speed'}); toast('success','–¢–∞—Ä–∏—Ñ','Speed –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'); loadPriv(); }catch(e){ toast('error','–ü–æ–∫—É–ø–∫–∞',String(e.message||e)); }});
  byId('std-activate')?.addEventListener('click',async()=>{ try{ await post('/api/priv/activate_standard',{}); toast('success','–°—Ç–∞–Ω–¥–∞—Ä—Ç','–í–æ–∑–≤—Ä–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω'); loadPriv(); }catch(e){ toast('error','–°—Ç–∞–Ω–¥–∞—Ä—Ç',String(e.message||e)); }});

  // —Ä—É–ª–µ—Ç–∫–∞
  const strip=byId('case-strip'); let rouletteReady=false;
  function setupRouletteOnce(){
    if(rouletteReady||!strip) return; rouletteReady=true;
    const items=[{t:'$0.10',i:'üí†'},{t:'$0.20',i:'ü™ô'},{t:'$0.50',i:'üíé'},{t:'$0.00',i:'‚ùå'},{t:'$0.30',i:'üîπ'},{t:'$0.70',i:'üî∑'},{t:'$1.20',i:'‚≠ê'},{t:'$0.95',i:'‚ú®'}];
    for(let k=0;k<18;k++){ const it=items[k%items.length]; const tile=document.createElement('div'); tile.className='case-tile'; tile.innerHTML=`<div class="icon">${it.i}</div>${it.t}`; strip.appendChild(tile); }
  }
  async function spin(){
    try{
      const r=await post('/api/roulette_spin',{}); const win=Number(r.win||0);
      byId('ru-result')&&(byId('ru-result').textContent=`–í—ã–∏–≥—Ä—ã—à: $${win.toFixed(2)} ‚Ä¢ –ë–∞–ª–∞–Ω—Å: $${Number(r.balance||0).toFixed(2)}`);
      const w=strip.scrollWidth; strip.style.transform='translateX(0)'; const shift=-Math.floor(Math.random()*Math.max(1,w-300));
      strip.animate([{transform:'translateX(0px)'},{transform:`translateX(${shift}px)`}],{duration:900,easing:'cubic-bezier(.2,.8,.2,1)',fill:'forwards'}); loadLogs();
    }catch(e){ toast('error','–†—É–ª–µ—Ç–∫–∞',String(e.message||e)); }
  }
  byId('ru-spin')?.addEventListener('click',spin);

  // –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
  async function refreshBalance(){ try{ const r=await post('/api/stats',{}); const bal=Number(r.stats?.balance||0); byId('wdBalance')&&(byId('wdBalance').textContent=bal.toFixed(2)); }catch{} }
  byId('wdSend')?.addEventListener('click',async()=>{
    const amt=Number(byId('wdAmount')?.value||0); if(!(amt>=5&&amt<=100)) return toast('error','–°—É–º–º–∞','–î–æ–ø—É—Å—Ç–∏–º–æ 5‚Äì100$');
    try{ const r=await post('/api/withdraw_request',{amount:amt}); toast('success','–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞',`ID ${r.payout_id}`); refreshBalance(); loadLogs(); }
    catch(e){ toast('error','–í—ã–≤–æ–¥',String(e.message||e)); }
  });
  byId('wdCancel')?.addEventListener('click',async()=>{
    try{ const r=await post('/api/withdraw_cancel',{}); toast(r.ok?'success':'error', r.ok?'–û—Ç–º–µ–Ω–µ–Ω–æ':'–û—à–∏–±–∫–∞', r.ok?'–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞':'–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏'); refreshBalance(); loadLogs(); }
    catch(e){ toast('error','–û—Ç–º–µ–Ω–∞',String(e.message||e)); }
  });

  // —Å—Ç–∞—Ä—Ç
  (async function init(){ show('menu'); await checkApi(); await loadStats(); await loadLogs(); })();
})();
